{"version":3,"sources":["detach/IosIPABuilder.js"],"names":["createIPABuilder","logger","_logger","withFields","buildPhase","buildParams","async","provisioningProfilePath","clientBuild","await","copyProvisioningProfileToHomedir","appUUID","info","plistData","readCMSMessage","codeSignIdentity","IosCodeSigning","ensureCertificateValid","validateProvisioningProfile","distCertFingerprint","teamID","bundleIdentifier","exportMethod","resolveExportMethod","exportOptionsPlistPath","path","join","provisionDir","exportOptionsData","provisioningProfileUUID","UUID","writeExportOptionsPlistFile","unsignedIpaPath","buildDir","ipaBuilderArgs","ipaPath","workspace","archivePath","outputPath","keychainPath","buildIPA","generatedEntitlementsPath","appDir","createEntitlementsFile","manifest","resignIPA","entitlementsPath","sourceIpaPath","destIpaPath","uploadPath","build","fs","remove","getProvisioningProfilePath","err","error","cleanup","mkdirp","getProvisioningProfileDirPath","newProvisioningProfilePath","copy","output","spawnAsyncThrowError","stdio","plistRaw","_","attempt","plist","parse","isError","Error","message","workingDir","process","env","TURTLE_WORKING_DIR_PATH","os","homedir"],"mappings":"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","file":"../../detach/IosIPABuilder.js","sourcesContent":["import _ from 'lodash';\nimport os from 'os';\nimport path from 'path';\nimport fs from 'fs-extra';\nimport plist from 'plist';\n\nimport _logger from './Logger';\nimport { spawnAsyncThrowError } from './ExponentTools';\nimport * as IosCodeSigning from './IosCodeSigning';\n\nconst logger = _logger.withFields({ buildPhase: 'building and signing IPA' });\n\nexport default function createIPABuilder(buildParams) {\n  const {\n    appUUID,\n    keychainPath,\n    bundleIdentifier,\n    teamID,\n    workingDir = process.env.TURTLE_WORKING_DIR_PATH,\n    manifest,\n  } = buildParams;\n  const workspace = path.join(\n    workingDir,\n    'shellAppWorkspaces',\n    'ios',\n    'default',\n    'ExpoKitApp.xcworkspace'\n  );\n  const appDir = path.join('/private/tmp/turtle', appUUID);\n  const buildDir = path.join(appDir, 'build');\n  const provisionDir = path.join(appDir, 'provisioning');\n  const outputPath = path.join(appDir, 'archive.xcarchive');\n  const uploadPath = path.join(buildDir, 'archive.ipa');\n\n  async function build() {\n    const { provisioningProfilePath, clientBuild } = buildParams;\n\n    await copyProvisioningProfileToHomedir(provisioningProfilePath, appUUID);\n    logger.info('provisioning profile copied to home directory');\n    const plistData = await readCMSMessage(provisioningProfilePath);\n    logger.info('done retrieving provisioning profile data');\n\n    logger.info('checking if teamID is present in keychain and that certificate is valid...');\n    const codeSignIdentity = await IosCodeSigning.ensureCertificateValid(buildParams);\n    logger.info('ensured certificate is valid');\n\n    logger.info('validating provisioning profile...');\n    IosCodeSigning.validateProvisioningProfile(plistData, {\n      distCertFingerprint: codeSignIdentity,\n      teamID,\n      bundleIdentifier,\n    });\n    logger.info('provisioning profile is valid');\n\n    logger.info('writing export-options.plist file...');\n    const exportMethod = IosCodeSigning.resolveExportMethod(plistData);\n    const exportOptionsPlistPath = path.join(provisionDir, 'export-options.plist');\n    const exportOptionsData = {\n      bundleIdentifier,\n      provisioningProfileUUID: plistData.UUID,\n      exportMethod,\n      teamID,\n    };\n    await IosCodeSigning.writeExportOptionsPlistFile(exportOptionsPlistPath, exportOptionsData);\n    logger.info('created export-options.plist file');\n\n    logger.info('generating IPA...');\n    const unsignedIpaPath = path.join(buildDir, `${appUUID}-unsigned.ipa`);\n    const ipaBuilderArgs = {\n      ipaPath: unsignedIpaPath,\n      workspace,\n      archivePath: outputPath,\n      codeSignIdentity,\n      exportOptionsPlistPath,\n      plistData,\n      keychainPath,\n      exportMethod,\n    };\n    await IosCodeSigning.buildIPA(ipaBuilderArgs, buildParams, clientBuild);\n    logger.info('generated IPA');\n\n    logger.info('creating entitlements file...');\n    const generatedEntitlementsPath = path.join(appDir, 'generatedEntitlements.entitlements');\n    await IosCodeSigning.createEntitlementsFile({\n      generatedEntitlementsPath,\n      plistData,\n      archivePath: outputPath,\n      manifest,\n    });\n    logger.info('created entitlements file');\n\n    logger.info('resigning IPA...');\n    await IosCodeSigning.resignIPA(\n      {\n        codeSignIdentity,\n        entitlementsPath: generatedEntitlementsPath,\n        provisioningProfilePath,\n        sourceIpaPath: unsignedIpaPath,\n        destIpaPath: uploadPath,\n        keychainPath,\n      },\n      buildParams\n    );\n    logger.info('resigned IPA');\n  }\n\n  async function cleanup() {\n    try {\n      await fs.remove(getProvisioningProfilePath(appUUID));\n    } catch (err) {\n      logger.error('failed to perform cleanup, error:', err);\n    }\n  }\n\n  async function copyProvisioningProfileToHomedir(provisioningProfilePath, appUUID) {\n    await fs.mkdirp(getProvisioningProfileDirPath());\n    const newProvisioningProfilePath = getProvisioningProfilePath(appUUID);\n    await fs.copy(provisioningProfilePath, newProvisioningProfilePath);\n  }\n\n  async function readCMSMessage(provisioningProfilePath) {\n    const { output } = await spawnAsyncThrowError(\n      'security',\n      ['cms', '-D', '-i', provisioningProfilePath],\n      {\n        stdio: 'pipe',\n      }\n    );\n    const plistRaw = output.join('');\n    const plistData = _.attempt(plist.parse, plistRaw);\n    if (_.isError(plistData)) {\n      throw new Error(`Error when parsing plist: ${plistData.message}`);\n    }\n    return plistData;\n  }\n\n  const getProvisioningProfileDirPath = () =>\n    path.join(os.homedir(), 'Library/MobileDevice/Provisioning Profiles');\n\n  const getProvisioningProfilePath = appUUID =>\n    path.join(getProvisioningProfileDirPath(), `${appUUID}.mobileprovision`);\n\n  return { build, cleanup };\n}\n"],"sourceRoot":"/xdl@50.8.0/src"}