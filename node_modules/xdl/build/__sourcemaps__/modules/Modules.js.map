{"version":3,"sources":["modules/Modules.js"],"names":["getAllForPlatform","getVersionableModulesForPlatform","getDetachableModulesForPlatform","getPublishableModules","mapForPlatform","platform","moduleConfig","config","expoSdkUniversalModulesConfigs","map","filter","isNativeModule","versionable","detachable","libName"],"mappings":";;;;;;;;QAqBgBA,iB,GAAAA,iB;QAIAC,gC,GAAAA,gC;QAMAC,+B,GAAAA,+B;QAMAC,qB,GAAAA,qB;;;;AAjChB;AAAA;AAAA;;AAaA,SAASC,cAAT,CAAwBC,QAAxB,EAAgE;AAC9D,SAAOC,6BAAsBA,YAAtBA,EAAuCA,aAAaC,MAAbD,CAAoBD,QAApBC,CAAvCA,CAAP;AACF;;AAEO,SAASN,iBAAT,CAA2BK,QAA3B,EAAoE;AACzE,SAAOG,2DAA+BC,GAA/BD,CAAmCJ,eAAeC,QAAfD,CAAnCI,CAAP;AACF;;AAEO,SAASP,gCAAT,CAA0CI,QAA1C,EAAmF;AACxF,SAAOL,kBAAkBK,QAAlBL,EAA4BU,MAA5BV,CAAmCM,gBAAgB;AACxD,WAAOA,aAAaK,cAAbL,IAA+BA,aAAaM,WAAnD;AACD,GAFMZ,CAAP;AAGF;;AAEO,SAASE,+BAAT,CAAyCG,QAAzC,EAAkF;AACvF,SAAOL,kBAAkBK,QAAlBL,EAA4BU,MAA5BV,CAAmCM,gBAAgB;AACxD,WAAOA,aAAaK,cAAbL,IAA+BA,aAAaO,UAAnD;AACD,GAFMb,CAAP;AAGF;;AAEO,SAASG,qBAAT,GAAsD;AAC3D,SAAOK,2DAA+BE,MAA/BF,CAAsCF,gBAAgB,CAAC,CAACA,aAAaQ,OAArEN,CAAP;AACF","file":"../../modules/Modules.js","sourcesContent":["/**\n * @flow\n */\n\nimport { expoSdkUniversalModulesConfigs } from './config';\n\ntype Platform = 'ios' | 'android';\n\ntype ModuleConfig = {\n  podName: string,\n  libName: string,\n  detachable: boolean,\n  isNativeModule: boolean,\n  subdirectory: string,\n  versionable: boolean,\n};\n\nfunction mapForPlatform(platform: Platform): () => ModuleConfig {\n  return moduleConfig => ({ ...moduleConfig, ...moduleConfig.config[platform] });\n}\n\nexport function getAllForPlatform(platform: Platform): Array<ModuleConfig> {\n  return expoSdkUniversalModulesConfigs.map(mapForPlatform(platform));\n}\n\nexport function getVersionableModulesForPlatform(platform: Platform): Array<ModuleConfig> {\n  return getAllForPlatform(platform).filter(moduleConfig => {\n    return moduleConfig.isNativeModule && moduleConfig.versionable;\n  });\n}\n\nexport function getDetachableModulesForPlatform(platform: Platform): Array<ModuleConfig> {\n  return getAllForPlatform(platform).filter(moduleConfig => {\n    return moduleConfig.isNativeModule && moduleConfig.detachable;\n  });\n}\n\nexport function getPublishableModules(): Array<ModuleConfig> {\n  return expoSdkUniversalModulesConfigs.filter(moduleConfig => !!moduleConfig.libName);\n}\n"],"sourceRoot":"/xdl@50.8.0/src"}